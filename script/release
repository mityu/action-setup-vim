#!/bin/bash

# Release script
#
# Usage: ./script/release {major|minor|patch}
# Run on develop branch.
#
# This script executes:
# 1. Merge "develop" into "master"
# 2. Version bump in CHANGELOG.md, README.md, package{,-lock}.json, index.ts and commit
# 3. Create a new tag with annotation containing release note

set -eu

version=$1

if [[ -z ${version} ]]; then
	echo "Usage: $0 {version}" >&2
	exit 64
fi

current_branch=$(git branch --show-current)

if [[ ${current_branch} != 'develop' ]]; then
	echo 'You must release on "develop" branch.' >&2
	exit 10
fi

if [[ ! -f CHANGELOG.md ]]; then
	echo 'CHANGELOG.md not found.' >&2
	exit 10
fi

release_note=$(sed -e '1,/## Unreleased/d' -e '/^##/,$d' CHANGELOG.md | sed -z -e 's/^\s\+//')
if [[ -z "${release_note}" ]]; then
	echo 'Release note not found.' >&2
	exit 10
fi

git checkout master
git merge --no-edit --no-ff develop

new_version=$(npm version --no-git-tag-version "${version}")
new_version_major=$(sed -e 's/\..*//' <<< "${new_version}")

new_version_header="${new_version} - $(date '+%Y-%m-%d')"
tag_message="${new_version_header}

${release_note}"

sed -i -e "s;thinca/action-setup-vim@v[0-9]\\+;thinca/action-setup-vim@${new_version_major};" README.md
sed -i -e "s/^## Unreleased$/## ${new_version_header}/" CHANGELOG.md
sed -i -e "s/^const actionVersion = \".\\+\";$/const actionVersion = \"${new_version#v}\";/" src/index.ts
git add README.md CHANGELOG.md src/index.ts package.json package-lock.json

git commit -m "${new_version}"
echo "${tag_message}" | git tag -s -F - "${new_version}+src"

git checkout develop
git merge --no-edit --no-ff master

sed -i '3i ## Unreleased\
\
\
' CHANGELOG.md
git add CHANGELOG.md
git commit -m "Add a new CHANGELOG entry for next version"
